# Generated by Django 4.2.23 on 2025-08-17 14:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "validation_code",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("code_expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("inactive", "Inactive"), ("active", "Active")],
                        default="inactive",
                        max_length=10,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Admin"), ("operator", "Operator")],
                        default="operator",
                        max_length=10,
                    ),
                ),
                ("mfa_enabled", models.BooleanField(default=True)),
                ("totp_secret", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Cluster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name="DataCenter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("location", models.CharField(max_length=255)),
                (
                    "admins",
                    models.ManyToManyField(
                        related_name="datacenters", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DiskArray",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("serial_number", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("manufacturer", models.CharField(max_length=100)),
                ("storage", models.PositiveIntegerField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_use", "In Use"),
                            ("maintenance", "Maintenance"),
                            ("available", "Available"),
                        ],
                        default="available",
                        max_length=20,
                    ),
                ),
                (
                    "datacenter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disk_arrays",
                        to="app.datacenter",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Network",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("vlan_id", models.PositiveIntegerField(blank=True, null=True)),
                ("cidr", models.CharField(max_length=32)),
                (
                    "gateway",
                    models.GenericIPAddressField(
                        blank=True, null=True, protocol="IPv4"
                    ),
                ),
                (
                    "datacenter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="networks",
                        to="app.datacenter",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Server",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("serial_number", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("manufacturer", models.CharField(max_length=100)),
                ("storage", models.PositiveIntegerField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_use", "In Use"),
                            ("maintenance", "Maintenance"),
                            ("available", "Available"),
                        ],
                        default="available",
                        max_length=20,
                    ),
                ),
                ("cpu", models.PositiveIntegerField()),
                ("ram", models.PositiveIntegerField()),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "cluster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="servers",
                        to="app.cluster",
                    ),
                ),
                (
                    "datacenter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="servers",
                        to="app.datacenter",
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="servers",
                        to="app.network",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MaintenanceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "performed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "datacenter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_records",
                        to="app.datacenter",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DeploymentJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("vm_name", models.CharField(max_length=255)),
                ("cpu", models.IntegerField(default=2)),
                ("memory", models.IntegerField(default=2048)),
                ("datacenter", models.CharField(default="DC0", max_length=255)),
                (
                    "old_cluster",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "old_network",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("datastore", models.CharField(default="LocalDS_0", max_length=255)),
                ("status", models.CharField(default="pending", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "cluster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="app.cluster",
                    ),
                ),
                (
                    "network",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="app.network",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="cluster",
            name="datacenter",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="clusters",
                to="app.datacenter",
            ),
        ),
        migrations.CreateModel(
            name="ServerDiskArrayMap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "connection_type",
                    models.CharField(
                        choices=[
                            ("iscsi", "iSCSI"),
                            ("fibre", "Fibre Channel"),
                            ("nfs", "NFS"),
                            ("smb", "SMB"),
                            ("sas", "SAS"),
                            ("other", "Other"),
                        ],
                        default="iscsi",
                        max_length=10,
                    ),
                ),
                (
                    "mount_point",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "disk_array",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="server_links",
                        to="app.diskarray",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disk_array_links",
                        to="app.server",
                    ),
                ),
            ],
            options={
                "unique_together": {("server", "disk_array")},
            },
        ),
    ]
